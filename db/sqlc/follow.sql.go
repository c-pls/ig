// Code generated by sqlc. DO NOT EDIT.
// source: follow.sql

package db

import (
	"context"
)

const getUserFollower = `-- name: GetUserFollower :many
SELECT following_user_id
from follows
WHERE followed_user_id = ($1)
  AND active = true
`

func (q *Queries) GetUserFollower(ctx context.Context, userID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUserFollower, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var following_user_id string
		if err := rows.Scan(&following_user_id); err != nil {
			return nil, err
		}
		items = append(items, following_user_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleFollow = `-- name: ToggleFollow :one
INSERT INTO follows(following_user_id, followed_user_id, active)
VALUES ($1, $2, true)
ON CONFLICT ("following_user_id", "followed_user_id") DO UPDATE
    SET active = NOT (SELECT active FROM follows WHERE following_user_id = $1 AND followed_user_id = $2)
RETURNING id, following_user_id, followed_user_id, created_at, updated_at, active
`

type ToggleFollowParams struct {
	FollowingUserID string `json:"following_user_id"`
	FollowedUserID  string `json:"followed_user_id"`
}

func (q *Queries) ToggleFollow(ctx context.Context, arg ToggleFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, toggleFollow, arg.FollowingUserID, arg.FollowedUserID)
	var i Follow
	err := row.Scan(
		&i.ID,
		&i.FollowingUserID,
		&i.FollowedUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}
