// Code generated by sqlc. DO NOT EDIT.
// source: like.sql

package db

import (
	"context"
)

const getLikeByParentId = `-- name: GetLikeByParentId :many
SELECT id, parent_id, user_id, created_at, updated_at, type, active
FROM likes
WHERE parent_id = $1
  AND active = True
ORDER BY created_at DESC
`

func (q *Queries) GetLikeByParentId(ctx context.Context, parentID string) ([]Like, error) {
	rows, err := q.db.QueryContext(ctx, getLikeByParentId, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.ParentID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Type,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleLike = `-- name: ToggleLike :one
INSERT INTO likes(parent_id, user_id, type, active)
VALUES ($1, $2, $3, true)
ON CONFLICT ("parent_id", "user_id") DO UPDATE
    SET active = NOT (SELECT active FROM likes WHERE parent_id = $1 AND user_id = $2)
RETURNING id, parent_id, user_id, created_at, updated_at, type, active
`

type ToggleLikeParams struct {
	ParentID string `json:"parent_id"`
	UserID   string `json:"user_id"`
	Type     string `json:"type"`
}

func (q *Queries) ToggleLike(ctx context.Context, arg ToggleLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, toggleLike, arg.ParentID, arg.UserID, arg.Type)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Active,
	)
	return i, err
}
