// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
)

const countUserPost = `-- name: CountUserPost :one
SELECT count(*)
from posts
WHERE user_id = $1
`

func (q *Queries) CountUserPost(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserPost, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts(post_id, user_id, caption, longitude, latitude)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, post_id, user_id, caption, longitude, latitude, created_at, updated_at
`

type CreatePostParams struct {
	PostID    string  `json:"post_id"`
	UserID    string  `json:"user_id"`
	Caption   string  `json:"caption"`
	Longitude float64 `json:"longitude"`
	Latitude  float64 `json:"latitude"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.PostID,
		arg.UserID,
		arg.Caption,
		arg.Longitude,
		arg.Latitude,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Caption,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE
FROM posts
WHERE post_id = $1
`

func (q *Queries) DeletePost(ctx context.Context, postID string) error {
	_, err := q.db.ExecContext(ctx, deletePost, postID)
	return err
}

const getAllUserPost = `-- name: GetAllUserPost :many
SELECT id, post_id, user_id, caption, longitude, latitude, created_at, updated_at
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllUserPost(ctx context.Context, userID string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPost, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Caption,
			&i.Longitude,
			&i.Latitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserPostAsc = `-- name: GetAllUserPostAsc :many
SELECT id, post_id, user_id, caption, longitude, latitude, created_at, updated_at
FROM posts
WHERE user_id = $1
  AND created_at > to_timestamp($3, 'YYYY-MM-DD HH24:MI:SS:US')
ORDER BY created_at
LIMIT $2
`

type GetAllUserPostAscParams struct {
	UserID    string `json:"user_id"`
	Limit     int32  `json:"limit"`
	CreatedAt string `json:"created_at"`
}

func (q *Queries) GetAllUserPostAsc(ctx context.Context, arg GetAllUserPostAscParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPostAsc, arg.UserID, arg.Limit, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Caption,
			&i.Longitude,
			&i.Latitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserPostDesc = `-- name: GetAllUserPostDesc :many
SELECT id, post_id, user_id, caption, longitude, latitude, created_at, updated_at
FROM posts
WHERE user_id = $1
  AND created_at < to_timestamp($3, 'YYYY-MM-DD HH24:MI:SS:US')
ORDER BY created_at DESC
LIMIT $2
`

type GetAllUserPostDescParams struct {
	UserID    string `json:"user_id"`
	Limit     int32  `json:"limit"`
	CreatedAt string `json:"created_at"`
}

func (q *Queries) GetAllUserPostDesc(ctx context.Context, arg GetAllUserPostDescParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPostDesc, arg.UserID, arg.Limit, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Caption,
			&i.Longitude,
			&i.Latitude,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, post_id, user_id, caption, longitude, latitude, created_at, updated_at
from posts
WHERE post_id = $1
`

func (q *Queries) GetPostById(ctx context.Context, postID string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, postID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Caption,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePostCaption = `-- name: UpdatePostCaption :one
UPDATE posts
SET caption = $2
WHERE post_id = $1
RETURNING id, post_id, user_id, caption, longitude, latitude, created_at, updated_at
`

type UpdatePostCaptionParams struct {
	PostID  string `json:"post_id"`
	Caption string `json:"caption"`
}

func (q *Queries) UpdatePostCaption(ctx context.Context, arg UpdatePostCaptionParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostCaption, arg.PostID, arg.Caption)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.UserID,
		&i.Caption,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
