// Code generated by sqlc. DO NOT EDIT.
// source: photo.sql

package db

import (
	"context"
)

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO photos(photo_id, post_id, url)
VALUES ($1, $2, $3)
RETURNING id, photo_id, post_id, url, created_at
`

type CreatePhotoParams struct {
	PhotoID string `json:"photo_id"`
	PostID  string `json:"post_id"`
	Url     string `json:"url"`
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photo, error) {
	row := q.db.QueryRowContext(ctx, createPhoto, arg.PhotoID, arg.PostID, arg.Url)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.PhotoID,
		&i.PostID,
		&i.Url,
		&i.CreatedAt,
	)
	return i, err
}

const deletePhoto = `-- name: DeletePhoto :exec
DELETE
FROM photos
WHERE photo_id = $1
`

func (q *Queries) DeletePhoto(ctx context.Context, photoID string) error {
	_, err := q.db.ExecContext(ctx, deletePhoto, photoID)
	return err
}

const getPostPhoto = `-- name: GetPostPhoto :many
SELECT id, photo_id, post_id, url, created_at
FROM photos
WHERE post_id = $1
`

func (q *Queries) GetPostPhoto(ctx context.Context, postID string) ([]Photo, error) {
	rows, err := q.db.QueryContext(ctx, getPostPhoto, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Photo{}
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.ID,
			&i.PhotoID,
			&i.PostID,
			&i.Url,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
