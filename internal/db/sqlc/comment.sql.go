// Code generated by sqlc. DO NOT EDIT.
// source: comment.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments(comment_id, user_id, parent_id, content, type)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, comment_id, user_id, parent_id, content, type, created_at, updated_at
`

type CreateCommentParams struct {
	CommentID string `json:"comment_id"`
	UserID    string `json:"user_id"`
	ParentID  string `json:"parent_id"`
	Content   string `json:"content"`
	Type      string `json:"type"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.CommentID,
		arg.UserID,
		arg.ParentID,
		arg.Content,
		arg.Type,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.ParentID,
		&i.Content,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE
FROM comments
WHERE comment_id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, commentID string) error {
	_, err := q.db.ExecContext(ctx, deleteComment, commentID)
	return err
}

const getCommentById = `-- name: GetCommentById :one
SELECT id, comment_id, user_id, parent_id, content, type, created_at, updated_at
FROM comments
WHERE comment_id = $1
`

func (q *Queries) GetCommentById(ctx context.Context, commentID string) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, commentID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.ParentID,
		&i.Content,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getListOfComment = `-- name: GetListOfComment :many
SELECT id, comment_id, user_id, parent_id, content, type, created_at, updated_at
FROM comments
WHERE parent_id = $1
`

func (q *Queries) GetListOfComment(ctx context.Context, parentID string) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getListOfComment, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CommentID,
			&i.UserID,
			&i.ParentID,
			&i.Content,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $2
WHERE comment_id = $1
RETURNING id, comment_id, user_id, parent_id, content, type, created_at, updated_at
`

type UpdateCommentParams struct {
	CommentID string `json:"comment_id"`
	Content   string `json:"content"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment, arg.CommentID, arg.Content)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentID,
		&i.UserID,
		&i.ParentID,
		&i.Content,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
