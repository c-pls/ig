// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(user_id, username, salted_password, first_name, last_name, bio, avatar_url)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
`

type CreateUserParams struct {
	UserID         string `json:"user_id"`
	Username       string `json:"username"`
	SaltedPassword string `json:"salted_password"`
	FirstName      string `json:"first_name"`
	LastName       string `json:"last_name"`
	Bio            string `json:"bio"`
	AvatarUrl      string `json:"avatar_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.SaltedPassword,
		arg.FirstName,
		arg.LastName,
		arg.Bio,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUserName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAvatar = `-- name: UpdateAvatar :one
UPDATE users
SET avatar_url = $2
WHERE user_id = $1
RETURNING id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
`

type UpdateAvatarParams struct {
	UserID    string `json:"user_id"`
	AvatarUrl string `json:"avatar_url"`
}

func (q *Queries) UpdateAvatar(ctx context.Context, arg UpdateAvatarParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateAvatar, arg.UserID, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBio = `-- name: UpdateBio :one
UPDATE users
SET bio = $2
WHERE user_id = $1
RETURNING id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
`

type UpdateBioParams struct {
	UserID string `json:"user_id"`
	Bio    string `json:"bio"`
}

func (q *Queries) UpdateBio(ctx context.Context, arg UpdateBioParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateBio, arg.UserID, arg.Bio)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFirstName = `-- name: UpdateFirstName :one
UPDATE users
SET first_name = $2
WHERE user_id = $1
RETURNING id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
`

type UpdateFirstNameParams struct {
	UserID    string `json:"user_id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) UpdateFirstName(ctx context.Context, arg UpdateFirstNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateFirstName, arg.UserID, arg.FirstName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLastName = `-- name: UpdateLastName :one
UPDATE users
SET last_name = $2
WHERE user_id = $1
RETURNING id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
`

type UpdateLastNameParams struct {
	UserID   string `json:"user_id"`
	LastName string `json:"last_name"`
}

func (q *Queries) UpdateLastName(ctx context.Context, arg UpdateLastNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateLastName, arg.UserID, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
SET salted_password = $2
WHERE user_id = $1
RETURNING id, user_id, username, salted_password, first_name, last_name, bio, avatar_url, created_at, updated_at
`

type UpdatePasswordParams struct {
	UserID         string `json:"user_id"`
	SaltedPassword string `json:"salted_password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.UserID, arg.SaltedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.SaltedPassword,
		&i.FirstName,
		&i.LastName,
		&i.Bio,
		&i.AvatarUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
