// Code generated by sqlc. DO NOT EDIT.
// source: like.sql

package db

import (
	"context"
)

const createLike = `-- name: CreateLike :one
INSERT INTO likes(like_id, parent_id, user_id, type, active)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, like_id, parent_id, user_id, created_at, updated_at, type, active
`

type CreateLikeParams struct {
	LikeID   string `json:"like_id"`
	ParentID string `json:"parent_id"`
	UserID   string `json:"user_id"`
	Type     string `json:"type"`
	Active   bool   `json:"active"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) (Like, error) {
	row := q.db.QueryRowContext(ctx, createLike,
		arg.LikeID,
		arg.ParentID,
		arg.UserID,
		arg.Type,
		arg.Active,
	)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.LikeID,
		&i.ParentID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Active,
	)
	return i, err
}

const toggleLike = `-- name: ToggleLike :one
UPDATE likes
SET active = NOT active
WHERE like_id = $1
RETURNING id, like_id, parent_id, user_id, created_at, updated_at, type, active
`

func (q *Queries) ToggleLike(ctx context.Context, likeID string) (Like, error) {
	row := q.db.QueryRowContext(ctx, toggleLike, likeID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.LikeID,
		&i.ParentID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Type,
		&i.Active,
	)
	return i, err
}
